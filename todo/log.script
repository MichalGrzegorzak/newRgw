CREATE TABLE [dbo].[Log] (
    [Id] [int] IDENTITY (1, 1) NOT NULL,
    [Date] [datetime] NOT NULL,
    [Thread] [varchar] (255) NOT NULL,
    [Level] [varchar] (50) NOT NULL,
    [Logger] [varchar] (255) NOT NULL,
    [Message] [varchar] (4000) NOT NULL,
    [Exception] [varchar] (2000) NULL
)

Use master
go
Exec sp_addlogin 'MYLOGIN','MyLogInPassword'
go
use testMIgrater
go
Exec sp_adduser 'MYLOGIN','MYUSER','public'
go
Grant all on Log4Net TO MYUSER
go


There is an excellent code CodeProject article here. Here are a couple of highlights:

    Plan for the worst*
    Check it early
    Don't trust external data
    The only reliable devices are: the video, the mouse and keyboard.
    Writes can fail, too
    Code Safely
    Don't throw new Exception()
    Don't put important exception information on the Message field
    Put a single catch (Exception ex) per thread
    Generic Exceptions caught should be published
    Log Exception.ToString(); never log only Exception.Message!
    Don't catch (Exception) more than once per thread
    Don't ever swallow exceptions
    Cleanup code should be put in finally blocks
    Use "using" everywhere
    Don't return special values on error conditions
    Don't use exceptions to indicate absence of a resource
    Don't use exception handling as means of returning information from a method
    Use exceptions for errors that should not be ignored
    Don't clear the stack trace when re-throwing an exception
    Avoid changing exceptions without adding semantic value
    Exceptions should be marked [Serializable]
    When in doubt, don't Assert, throw an Exception
    Each exception class should have at least the three original constructors
    Be careful when using the AppDomain.UnhandledException event
    Don't reinvent the wheel
    Don't use Unstructured Error Handling (VB.Net)

